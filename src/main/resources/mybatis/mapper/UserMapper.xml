<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.aihelper.mapper.UserMapper">

    <resultMap id="userResultMap" type="com.aihelper.model.User">
        <id property="userId" column="user_id" />
        <result property="username" column="username" />
        <result property="password" column="password" />
        <result property="email" column="email" />
        <result property="fullname" column="fullname" />
        <result property="role" column="role" />
        <result property="status" column="status" />
        <result property="createdAt" column="created_at" />
        <result property="updatedAt" column="updated_at" />
        <result property="lastLoginAt" column="last_login_at" />
    </resultMap>

    <sql id="baseColumns">
        user_id, username, email, fullname, role, status, created_at, updated_at, last_login_at
    </sql>

    <sql id="allColumns">
        user_id, username, password, email, fullname, role, status, created_at, updated_at, last_login_at
    </sql>

    <select id="findAll" resultMap="userResultMap">
        SELECT <include refid="baseColumns" />
        FROM users
        ORDER BY user_id DESC
    </select>

    <select id="findAllWithPaging" resultMap="userResultMap">
        SELECT <include refid="baseColumns" />
        FROM users
        ORDER BY user_id DESC
        LIMIT #{offset}, #{limit}
    </select>

    <select id="countAll" resultType="int">
        SELECT COUNT(*) FROM users
    </select>

    <select id="findById" resultMap="userResultMap">
        SELECT <include refid="baseColumns" />
        FROM users
        WHERE user_id = #{userId}
    </select>

    <select id="findByUsername" resultMap="userResultMap">
        SELECT <include refid="allColumns" />
        FROM users
        WHERE username = #{username}
    </select>

    <select id="findByEmail" resultMap="userResultMap">
        SELECT <include refid="baseColumns" />
        FROM users
        WHERE email = #{email}
    </select>

    <insert id="insert" parameterType="com.aihelper.model.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO users (username, password, email, fullname, role, status, created_at)
        VALUES (#{username}, #{password}, #{email}, #{fullname}, #{role}, #{status}, NOW())
    </insert>

    <update id="update" parameterType="com.aihelper.model.User">
        UPDATE users
        SET 
            email = #{email},
            fullname = #{fullname},
            role = #{role},
            status = #{status},
            updated_at = NOW()
        WHERE user_id = #{userId}
    </update>

    <update id="updatePassword">
        UPDATE users
        SET 
            password = #{password},
            updated_at = NOW()
        WHERE user_id = #{userId}
    </update>

    <update id="updateLastLogin">
        UPDATE users
        SET last_login_at = NOW()
        WHERE user_id = #{userId}
    </update>

    <delete id="deleteById">
        DELETE FROM users
        WHERE user_id = #{userId}
    </delete>

    <select id="search" resultMap="userResultMap">
        SELECT <include refid="baseColumns" />
        FROM users
        WHERE 
            username LIKE CONCAT('%', #{query}, '%')
            OR email LIKE CONCAT('%', #{query}, '%')
            OR fullname LIKE CONCAT('%', #{query}, '%')
        ORDER BY user_id DESC
        LIMIT #{offset}, #{limit}
    </select>

    <select id="countSearch" resultType="int">
        SELECT COUNT(*) 
        FROM users
        WHERE 
            username LIKE CONCAT('%', #{query}, '%')
            OR email LIKE CONCAT('%', #{query}, '%')
            OR fullname LIKE CONCAT('%', #{query}, '%')
    </select>
</mapper> 